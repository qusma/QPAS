// -----------------------------------------------------------------------
// <copyright file="MathUtilsTest.cs" company="">
// Copyright 2014 Alexander Soffronow Pagonidis
// </copyright>
// -----------------------------------------------------------------------

using MathNet.Numerics.LinearAlgebra;
using MathNet.Numerics.LinearAlgebra.Double;
using NUnit.Framework;
using QPAS;
using System;
using System.Collections.Generic;

namespace QPASTest
{
    [TestFixture]
    public class MathUtilsTest
    {
        [Test]
        public void AutoCorrReturnsCorrectValues()
        {
            var inputs = new List<double>
            {
                0.5376671395461,
                1.29621787504899,
                -3.55506473605263,
                4.95490519596686,
                -2.80225494151279,
                -0.764280215796134,
                1.19286151385857,
                -0.53147180746094,
                2.80218045088143,
                -0.466335443302234,
                -0.540927030315638,
                7.15424743637325,
                -3.65940618154227,
                2.24646436819609,
                1.50320200196186,
                -0.982763835315527,
                0.795564613909559,
                1.408875897702,
                -0.204807466201298,
                1.4978555314146,
                0.663339209978946,
                -0.461791642863504,
                2.59622270762196,
                -0.294490284849147,
                -0.424102867524101,
                2.1760345287708,
                0.181085893777167,
                0.00436695174860635,
                1.32419752526591,
                -1.38459519564131,
                1.96954990261294,
                -2.82274854248543,
                0.96659528055876,
                -0.887698343225994,
                -3.20365592573805,
                3.57316576038512,
                -4.0574739153538,
                0.358261434189197,
                2.45041739872113,
                -3.83674327811863,
                2.97957251286344,
                -1.85072101437557,
                0.458411334687369,
                -0.247795184135431,
                -0.858531774796383,
                1.14768721776562,
                -0.999707640337226,
                0.762535010541496,
                0.300679362301719,
                0.64371491610364,
            };

            var targets = new List<double> //from matlab
            {
                1,
                -0.6108277,
                0.168786609,
                0.353260597,
                -0.439964685,
                0.418941056,
                -0.188144039,
                -0.07158148,
                0.318816635,
                -0.329525374
            };

            var res = MathUtils.AutoCorr(inputs, 10);
            for (int i = 0; i < targets.Count; i++)
            {
                Assert.IsTrue(ApproximatelyEqual(res[i], targets[i], 0.05), i.ToString());
            }
        }

        [Test]
        public void PartialAutoCorrReturnsCorrectValues()
        {
            var inputs = new List<double>
            {
                0.5376671395461,
                1.29621787504899,
                -3.55506473605263,
                4.95490519596686,
                -2.80225494151279,
                -0.764280215796134,
                1.19286151385857,
                -0.53147180746094,
                2.80218045088143,
                -0.466335443302234,
                -0.540927030315638,
                7.15424743637325,
                -3.65940618154227,
                2.24646436819609,
                1.50320200196186,
                -0.982763835315527,
                0.795564613909559,
                1.408875897702,
                -0.204807466201298,
                1.4978555314146,
                0.663339209978946,
                -0.461791642863504,
                2.59622270762196,
                -0.294490284849147,
                -0.424102867524101,
                2.1760345287708,
                0.181085893777167,
                0.00436695174860635,
                1.32419752526591,
                -1.38459519564131,
                1.96954990261294,
                -2.82274854248543,
                0.96659528055876,
                -0.887698343225994,
                -3.20365592573805,
                3.57316576038512,
                -4.0574739153538,
                0.358261434189197,
                2.45041739872113,
                -3.83674327811863,
                2.97957251286344,
                -1.85072101437557,
                0.458411334687369,
                -0.247795184135431,
                -0.858531774796383,
                1.14768721776562,
                -0.999707640337226,
                0.762535010541496,
                0.300679362301719,
                0.64371491610364,
            };

            List<double> targets = new List<double> //from matlab
            {
                1,
                -0.611217047490426,
                -0.328480197167343,
                0.533433170590709,
                0.160937901230007,
                0.209758114095027,
                -0.118867044841577,
                -0.277725452688068,
                0.0245845483415342,
                0.189672647955136,
            };

            var res = MathUtils.PartialAutoCorr(inputs, 10);
            for (int i = 0; i < targets.Count; i++)
            {
                Assert.IsTrue(ApproximatelyEqual(res[i], targets[i], 0.05), i.ToString());
            }
        }

        [Test]
        public void PCATest()
        {
            double[,] input = new double[10, 3]
            {
                {0.5376671395461, -1.34988694015652, 0.671497133608081},
                {1.83388501459509, 3.03492346633185, -1.20748692268504},
                {-2.25884686100365, 0.725404224946106, 0.717238651328839},
                {0.862173320368121, -0.0630548731896562, 1.63023528916473},
                {0.318765239858981, 0.714742903826096, 0.488893770311789},
                {-1.30768829630527, -0.204966058299775, 1.03469300991786},
                {-0.433592022305684, -0.124144348216312, 0.726885133383238},
                {0.34262446653865, 1.48969760778547, -0.303440924786016},
                {3.57839693972576, 1.40903448980048, 0.293871467096658},
                {2.76943702988488, 1.41719241342961, -0.787282803758638}
            };
            var inputArray = DenseMatrix.OfArray(input);
            Vector<double> latent;
            Matrix<double> coeff;
            Matrix<double> score;

            MathUtils.PCA(inputArray, out latent, out score, out coeff);

            List<double> latentTargets = new List<double>
            {
                3.9339,
                1.2361,
                0.1877
            };

            for (int i = 0; i < latentTargets.Count; i++)
            {
                Assert.IsTrue(ApproximatelyEqual(latentTargets[i], latent[i]));
            }

            double[,] coeffTargets = new double[3, 3]
            {
                {0.8390,   -0.5418,    0.0504  },
                {0.4427,    0.7336,    0.5156  },
                {-0.3163,   -0.4102,    0.8554 }
            };

            for (int i = 0; i < coeffTargets.GetLength(0); i++)
            {
                for (int j = 0; j < coeffTargets.GetLength(1); j++)
                {
                    Assert.IsTrue(ApproximatelyEqual(coeffTargets[i, j], coeff[i, j]), string.Format("{0},{1}", i, j));
                }
            }

            double[,] scoreTargets = new double[10, 3]
            {
                {-1.0915, -1.60199, -0.768692},
                {2.53168, 1.68328, -0.0497722},
                {-2.53347, 1.41679, 0.199351},
                {-0.552818, -1.2271, 0.731205},
                {-0.303338, 0.106133, 0.128562},
                {-2.24777, 0.0887109, 0.0391838},
                {-1.38125, -0.199294, -0.138338},
                {0.310418, 0.986763, -0.148408},
                {2.80057, -1.07055, 0.48414},
                {2.46748, -0.182744, -0.47723}
            };

            for (int i = 0; i < scoreTargets.GetLength(0); i++)
            {
                for (int j = 0; j < scoreTargets.GetLength(1); j++)
                {
                    Assert.IsTrue(ApproximatelyEqual(scoreTargets[i, j], score[i, j]), string.Format("{0},{1}", i, j));
                }
            }
        }

        private bool ApproximatelyEqual(double a, double b, double slack = 0.01)
        {
            return Math.Abs(a) - Math.Abs(b) < slack;
        }
    }
}