// <auto-generated />
using System;
using EntityModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntityModel.Migrations
{
    [DbContext(typeof(QpasDbContext))]
    [Migration("20210126004827_UserScriptType")]
    partial class UserScriptType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("EntityModel.Account", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountId")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("EntityModel.Benchmark", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Benchmarks");
                });

            modelBuilder.Entity("EntityModel.BenchmarkComponent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BenchmarkID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QDMSInstrumentID")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Weight")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("BenchmarkID");

                    b.ToTable("BenchmarkComponents");
                });

            modelBuilder.Entity("EntityModel.CashTransaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("AssetCategory")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ConID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FXRateToBase")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int?>("InstrumentID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TradeID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("InstrumentID");

                    b.HasIndex("TradeID");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("Type");

                    b.ToTable("CashTransactions");
                });

            modelBuilder.Entity("EntityModel.Currency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("EntityModel.DatasourcePreference", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssetClass")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Datasource")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("DatasourcePreferences");
                });

            modelBuilder.Entity("EntityModel.DividendAccrual", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssetCategory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<long>("ConID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FXRateToBase")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("GrossAmount")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("GrossRate")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("InstrumentID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("NetAmount")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("PayDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Tax")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("InstrumentID");

                    b.ToTable("DividendAccruals");
                });

            modelBuilder.Entity("EntityModel.EquitySummary", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Bonds")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BondsLong")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BondsShort")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Cash")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CashLong")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CashShort")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Commodities")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CommoditiesLong")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CommoditiesShort")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DividendAccruals")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DividendAccrualsLong")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("DividendAccrualsShort")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InterestAccruals")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InterestAccrualsLong")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("InterestAccrualsShort")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Notes")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NotesLong")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NotesShort")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Options")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OptionsLong")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("OptionsShort")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SLBCashCollateral")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SLBCashCollateralLong")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SLBCashCollateralShort")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SLBDirectSecuritiesBorrowed")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SLBDirectSecuritiesBorrowedLong")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SLBDirectSecuritiesBorrowedShort")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SLBDirectSecuritiesLent")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SLBDirectSecuritiesLentLong")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SLBDirectSecuritiesLentShort")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SoftDollars")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SoftDollarsLong")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SoftDollarsShort")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Stock")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StockLong")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("StockShort")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Total")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalLong")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalShort")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.ToTable("EquitySummaries");
                });

            modelBuilder.Entity("EntityModel.Execution", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssetCategory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BrokerageOrderID")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("BuySell")
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ClosePrice")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Commission")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("CommissionCurrencyID")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CostBasis")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrencyID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Exchange")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FIFORealizedPnL")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FXRateToBase")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<string>("IBExecID")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<long>("IBOrderID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("IBTradeID")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<int>("InstrumentID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MTMPnL")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("Multiplier")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("NetCash")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenClose")
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionType")
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("OrderPlacementTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderReference")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderType")
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Proceeds")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Taxes")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TradeMoney")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CommissionCurrencyID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("InstrumentID");

                    b.HasIndex("OrderID");

                    b.ToTable("Executions");
                });

            modelBuilder.Entity("EntityModel.FXPosition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ClosePrice")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CostBasis")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CostPrice")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("FXCurrencyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FunctionalCurrencyID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnrealizedPnL")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("FXCurrencyID");

                    b.HasIndex("FunctionalCurrencyID");

                    b.ToTable("FXPositions");
                });

            modelBuilder.Entity("EntityModel.FXRate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("FromCurrencyID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Rate")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("ToCurrencyID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("Date");

                    b.HasIndex("FromCurrencyID");

                    b.HasIndex("ToCurrencyID");

                    b.ToTable("FXRates");
                });

            modelBuilder.Entity("EntityModel.FXTransaction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Cost")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<int>("FXCurrencyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FunctionalCurrencyID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Proceeds")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int?>("TradeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("FXCurrencyID");

                    b.HasIndex("FunctionalCurrencyID");

                    b.HasIndex("TradeID");

                    b.ToTable("FXTransactions");
                });

            modelBuilder.Entity("EntityModel.Instrument", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssetCategory")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("TEXT");

                    b.Property<int>("Multiplier")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OptionType")
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<int?>("QDMSInstrumentID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Strike")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("UnderlyingSymbol")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("ConID");

                    b.ToTable("Instruments");
                });

            modelBuilder.Entity("EntityModel.OpenPosition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CostBasisDollars")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CostBasisPrice")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrencyID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("FXRateToBase")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("InstrumentID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MarkPrice")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("Multiplier")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("OpenPrice")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<double>("PercentOfNAV")
                        .HasColumnType("REAL");

                    b.Property<decimal>("PositionValue")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Side")
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnrealizedPnL")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("InstrumentID");

                    b.ToTable("OpenPositions");
                });

            modelBuilder.Entity("EntityModel.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssetCategory")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BuySell")
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ClosePrice")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Commission")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("CommissionCurrencyID")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CostBasis")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("CurrencyID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("FIFORealizedPnL")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FXRateToBase")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<long?>("IBOrderID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InstrumentID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsReal")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("MTMPnL")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("Multiplier")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("NetCash")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("OpenClose")
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("OptionType")
                        .HasMaxLength(10)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OrderPlacementTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderReference")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderType")
                        .HasMaxLength(20)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Proceeds")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("ReferencePrice")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReferenceTime")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Taxes")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TradeDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TradeID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TradeMoney")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CommissionCurrencyID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("IBOrderID")
                        .IsUnique();

                    b.HasIndex("InstrumentID");

                    b.HasIndex("TradeDate");

                    b.HasIndex("TradeID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("EntityModel.PriorPosition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AccountID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssetCategory")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ConID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("FXRateToBase")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<int>("InstrumentID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("PriorMTMPnL")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<long?>("UnderlyingConID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UnderlyingSymbol")
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("AccountID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("Date");

                    b.HasIndex("InstrumentID");

                    b.ToTable("PriorPositions");
                });

            modelBuilder.Entity("EntityModel.Strategy", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Strategies");
                });

            modelBuilder.Entity("EntityModel.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("EntityModel.Trade", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("CapitalLong")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CapitalNet")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CapitalShort")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("CapitalTotal")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Commissions")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateClosed")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOpened")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(65535)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<bool>("Open")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("ResultDollars")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ResultDollarsLong")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("ResultDollarsShort")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<double>("ResultPct")
                        .HasColumnType("REAL");

                    b.Property<double>("ResultPctLong")
                        .HasColumnType("REAL");

                    b.Property<double>("ResultPctShort")
                        .HasColumnType("REAL");

                    b.Property<int?>("StrategyID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("UnrealizedResultDollars")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnrealizedResultDollarsLong")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnrealizedResultDollarsShort")
                        .HasPrecision(20, 10)
                        .HasColumnType("TEXT");

                    b.Property<double>("UnrealizedResultPct")
                        .HasColumnType("REAL");

                    b.Property<double>("UnrealizedResultPctLong")
                        .HasColumnType("REAL");

                    b.Property<double>("UnrealizedResultPctShort")
                        .HasColumnType("REAL");

                    b.HasKey("ID");

                    b.HasIndex("DateOpened");

                    b.HasIndex("StrategyID");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("EntityModel.UserScript", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasMaxLength(65535)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferencedAssembliesAsString")
                        .HasMaxLength(65535)
                        .IsUnicode(true)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("UserScripts");
                });

            modelBuilder.Entity("TagTrade", b =>
                {
                    b.Property<int>("TagsID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TradesID")
                        .HasColumnType("INTEGER");

                    b.HasKey("TagsID", "TradesID");

                    b.HasIndex("TradesID");

                    b.ToTable("TagMap");
                });

            modelBuilder.Entity("EntityModel.BenchmarkComponent", b =>
                {
                    b.HasOne("EntityModel.Benchmark", "Benchmark")
                        .WithMany("Components")
                        .HasForeignKey("BenchmarkID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Benchmark");
                });

            modelBuilder.Entity("EntityModel.CashTransaction", b =>
                {
                    b.HasOne("EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");

                    b.HasOne("EntityModel.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModel.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentID");

                    b.HasOne("EntityModel.Trade", "Trade")
                        .WithMany("CashTransactions")
                        .HasForeignKey("TradeID");

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("Instrument");

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("EntityModel.DividendAccrual", b =>
                {
                    b.HasOne("EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");

                    b.HasOne("EntityModel.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModel.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("EntityModel.EquitySummary", b =>
                {
                    b.HasOne("EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("EntityModel.Execution", b =>
                {
                    b.HasOne("EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");

                    b.HasOne("EntityModel.Currency", "CommissionCurrency")
                        .WithMany()
                        .HasForeignKey("CommissionCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModel.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModel.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModel.Order", "Order")
                        .WithMany("Executions")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CommissionCurrency");

                    b.Navigation("Currency");

                    b.Navigation("Instrument");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("EntityModel.FXPosition", b =>
                {
                    b.HasOne("EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");

                    b.HasOne("EntityModel.Currency", "FXCurrency")
                        .WithMany()
                        .HasForeignKey("FXCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModel.Currency", "FunctionalCurrency")
                        .WithMany()
                        .HasForeignKey("FunctionalCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("FunctionalCurrency");

                    b.Navigation("FXCurrency");
                });

            modelBuilder.Entity("EntityModel.FXRate", b =>
                {
                    b.HasOne("EntityModel.Currency", "FromCurrency")
                        .WithMany()
                        .HasForeignKey("FromCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModel.Currency", "ToCurrency")
                        .WithMany()
                        .HasForeignKey("ToCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromCurrency");

                    b.Navigation("ToCurrency");
                });

            modelBuilder.Entity("EntityModel.FXTransaction", b =>
                {
                    b.HasOne("EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");

                    b.HasOne("EntityModel.Currency", "FXCurrency")
                        .WithMany()
                        .HasForeignKey("FXCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModel.Currency", "FunctionalCurrency")
                        .WithMany()
                        .HasForeignKey("FunctionalCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModel.Trade", "Trade")
                        .WithMany("FXTransactions")
                        .HasForeignKey("TradeID");

                    b.Navigation("Account");

                    b.Navigation("FunctionalCurrency");

                    b.Navigation("FXCurrency");

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("EntityModel.OpenPosition", b =>
                {
                    b.HasOne("EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");

                    b.HasOne("EntityModel.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModel.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("EntityModel.Order", b =>
                {
                    b.HasOne("EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");

                    b.HasOne("EntityModel.Currency", "CommissionCurrency")
                        .WithMany()
                        .HasForeignKey("CommissionCurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModel.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModel.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModel.Trade", "Trade")
                        .WithMany("Orders")
                        .HasForeignKey("TradeID");

                    b.Navigation("Account");

                    b.Navigation("CommissionCurrency");

                    b.Navigation("Currency");

                    b.Navigation("Instrument");

                    b.Navigation("Trade");
                });

            modelBuilder.Entity("EntityModel.PriorPosition", b =>
                {
                    b.HasOne("EntityModel.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountID");

                    b.HasOne("EntityModel.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModel.Instrument", "Instrument")
                        .WithMany()
                        .HasForeignKey("InstrumentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");

                    b.Navigation("Instrument");
                });

            modelBuilder.Entity("EntityModel.Trade", b =>
                {
                    b.HasOne("EntityModel.Strategy", "Strategy")
                        .WithMany()
                        .HasForeignKey("StrategyID");

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("TagTrade", b =>
                {
                    b.HasOne("EntityModel.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityModel.Trade", null)
                        .WithMany()
                        .HasForeignKey("TradesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EntityModel.Benchmark", b =>
                {
                    b.Navigation("Components");
                });

            modelBuilder.Entity("EntityModel.Order", b =>
                {
                    b.Navigation("Executions");
                });

            modelBuilder.Entity("EntityModel.Trade", b =>
                {
                    b.Navigation("CashTransactions");

                    b.Navigation("FXTransactions");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
